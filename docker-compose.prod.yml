# Ce fichier est optimisé pour la production.
# Il ne "build" rien, il utilise les images déjà construites par la CI.
# Il charge automatiquement les variables depuis un fichier .env situé dans le même répertoire.

services:
  # Service de base de données PostgreSQL
  db:
    image: postgres:14-alpine
    container_name: neoorga-db
    restart: always
    environment:
      # Ces variables sont lues depuis le fichier .env
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    # Le port n'est pas exposé sur l'hôte, la communication se fait via le réseau Docker interne.

  # Service Backend (API Python/Flask)
  backend:
    # On utilise l'image dont le nom est construit à partir de la variable du .env
    image: ghcr.io/${GITHUB_REPO}/backend:latest
    container_name: neoorga-backend
    restart: always
    depends_on:
      - db
    environment:
      # L'URL de la base de données est construite à partir des variables du .env
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}

  # Reverse Proxy Nginx (qui sert le frontend et proxy le backend)
  nginx:
    image: ghcr.io/${GITHUB_REPO}/nginx:latest
    container_name: neoorga-nginx
    restart: always
    ports:
      - "80:80"
    depends_on:
      - backend

volumes:
  postgres-data:
