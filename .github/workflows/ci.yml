# Nom du workflow qui apparaîtra dans l'onglet "Actions" de GitHub
name: NeoOrga CI Pipeline

# Déclencheurs : quand exécuter ce workflow ?
on:
  # À chaque push sur la branche main
  push:
    branches: [ main ]
  # Aussi à chaque création de Pull Request vers la branche main
  pull_request:
    branches: [ main ]

jobs:
  # Premier job : vérifier la qualité du code Python
  lint-backend:
    name: Lint Backend Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Configuration de Python et cache des dépendances
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Installation des dépendances et du linter
        working-directory: ./backend
        run: |
          pip install -r requirements.txt
          pip install flake8

      - name: Lancer le linter Flake8
        run: |
          # Vérifie la syntaxe et les erreurs bloquantes. Le build échouera si des erreurs sont trouvées.
          flake8 backend/ --count --select=E9,F63,F7,F82 --show-source --statistics

  # Nouveau job : vérifier la qualité du code Frontend
  lint-frontend:
    name: Lint Frontend Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Configuration de Node.js et cache des dépendances
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Doit correspondre à votre Dockerfile
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Installation des dépendances
        working-directory: ./frontend
        run: npm install

      - name: Lancer le linter ESLint
        working-directory: ./frontend
        run: npm run lint # Assurez-vous d'avoir un script "lint" dans votre package.json

  # Troisième job : construire et pousser les images Docker
  build-and-push-images:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    # Ce job ne s'exécute que si les DEUX jobs de lint ont réussi
    needs: [lint-backend, lint-frontend]
    # On ne pousse les images que sur un push direct sur 'main', pas sur les PRs
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      contents: read # Nécessaire pour le checkout du code (actions/checkout)
      packages: write # Nécessaire pour pousser des images sur le GitHub Container Registry

    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Connexion au Registre de Conteneurs GitHub (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }} # Votre nom d'utilisateur GitHub
          password: ${{ secrets.GITHUB_TOKEN }} # Secret généré automatiquement par GitHub

      - name: Construire et pousser l'image backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ghcr.io/${{ github.repository }}/backend:latest

      - name: Construire et pousser l'image frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ghcr.io/${{ github.repository }}/frontend:latest

      - name: Construire et pousser l'image nginx
        uses: docker/build-push-action@v5
        with:
          context: ./nginx
          push: true
          tags: ghcr.io/${{ github.repository }}/nginx:latest

  # Quatrième job : déployer l'application sur le serveur
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    # Dépend du job de build, ne se lance que s'il réussit
    needs: build-and-push-images
    # S'exécute uniquement sur un push vers la branche main
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            # Se placer dans le répertoire du projet sur le serveur
            # Assurez-vous que ce chemin existe et contient votre docker-compose.yml
            cd /home/debian/neoorga

            # Connexion au GitHub Container Registry (GHCR)
            echo ${{ secrets.GHCR_PAT }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Tirer les dernières versions des images en utilisant le fichier de prod
            docker compose -f docker-compose.prod.yml pull

            # Relancer les services avec les nouvelles images en utilisant le fichier de prod
            docker compose -f docker-compose.prod.yml up -d --remove-orphans

            # Nettoyer les anciennes images non utilisées pour libérer de l'espace
            docker image prune -af
